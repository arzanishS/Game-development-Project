-- Declare Local Variables
local HASH_LEFT = hash("MOVE_LEFT")
local HASH_RIGHT = hash("MOVE_RIGHT")
local level = 1
-- Declare Local Function which plays animation unless that same animation is already playing
local function play_animation(self, animation)
	if self.current_animation ~= animation then
		self.current_animation = animation
		-- Send message to this character's sprite to start animation
		msg.post("#arsenemove", "play_animation", { id = animation })
	end
end


-- ------------------------------------------------------------------------------------------
-- The init() function is executed when the game object is initialized
-- ------------------------------------------------------------------------------------------
function init(self)
	-- Acquire Input Focus and set initial character speed to zero
	msg.post(".", "acquire_input_focus")
	-- Set a Script Properties
	self.current_animation = hash("idle")	
	self.speed = vmath.vector3()
end


-- ------------------------------------------------------------------------------------------
-- The update() function is executed every frame
-- ------------------------------------------------------------------------------------------
function update(self, dt)
	-- Bounce the Character x position a minimum of 50 pixels off the side edges of the 
	-- Game World; keeping the Game Object within a limited y range
	if (go.get_position().x < -350) then
		self.speed.x = 90
	end

	if (go.get_position().x > 350) then
		self.speed.x = -90
	end
	if(level == 1) then
		if (go.get_position().x > -100 ) then
		msg.post("main:/dialouges#aresenroomdialougues", "msgbox1stdialougue")
		end
	end
	-- Flip the sprite animation image when the x speed is negative
	sprite.set_hflip("#arsenemove", self.speed.x < 0)

	-- Update the arrowMove Character's Postion based on speed and time since last update 
	go.set_position(go.get_position() + self.speed * dt)
end

-- ------------------------------------------------------------------------------------------
-- The on_input() function processes all input triggers (Key Triggers/Touch Events)
-- ------------------------------------------------------------------------------------------

function on_input(self, action_id, action)

	-- Process the clicking of the LEFT Arrow Key
	if action_id == HASH_LEFT then

		-- When the Left Arrow is pressed, set the horizontal speed to a negative 50 
		-- and set the animation to walking
		if action.pressed then
			self.speed.x = -90
			play_animation(self, hash("run"))

			-- When the Left Arrow is released, set the horizontal speed to zero and 
			-- set the animation to idle	
		elseif action.released then
			self.speed.x = 0
			play_animation(self, hash("idle"))
		end
		return true

		-- Process the clicking of the RIGHT Arrow Key
	elseif action_id == HASH_RIGHT then
		if action.pressed then
			self.speed.x = 90
			play_animation(self, hash("run"))
		elseif action.released then
			self.speed.x = 0
			play_animation(self, hash("idle"))
		end
		return true

		-- Process the clicking of the UP Arrow Key
	elseif action_id == HASH_UP then
		if action.pressed then
			self.speed.y = 90
			play_animation(self, hash("run"))
		elseif action.released then
			self.speed.y = 0
			play_animation(self, hash("idle"))
		end
		return true

		-- Process the clicking of the DOWN Arrow Key
	elseif action_id == HASH_DOWN then
		if action.pressed then
			self.speed.y = -90
			play_animation(self, hash("run"))
		elseif action.released then
			self.speed.y = 0
			play_animation(self, hash("idle"))
		end
		return true
	end
end